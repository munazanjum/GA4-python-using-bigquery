# -*- coding: utf-8 -*-
"""BigQuery bquxjob_77796b55_18ae075852e

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/bigquery_job.ipynb
"""

# @title Setup
from google.colab import auth
from google.cloud import bigquery
from google.colab import data_table

project = 'lustrous-acumen-399315' # Project ID inserted based on the query results selected to explore
location = 'US' # Location inserted based on the query results selected to explore
client = bigquery.Client(project=project, location=location)
data_table.enable_dataframe_formatter()
auth.authenticate_user()

"""## Reference SQL syntax from the original job
Use the ```jobs.query```
[method](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) to
return the SQL syntax from the job. This can be copied from the output cell
below to edit the query now or in the future. Alternatively, you can use
[this link](https://console.cloud.google.com/bigquery?j=lustrous-acumen-399315:US:bquxjob_77796b55_18ae075852e)
back to BigQuery to edit the query within the BigQuery user interface.
"""

# Running this code will display the query used to generate your previous job

job = client.get_job('bquxjob_77796b55_18ae075852e') # Job ID inserted based on the query results selected to explore
print(job.query)

"""# Result set loaded from BigQuery job as a DataFrame
Query results are referenced from the Job ID ran from BigQuery and the query
does not need to be re-run to explore results. The ```to_dataframe```
[method](https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html#google.cloud.bigquery.job.QueryJob.to_dataframe)
downloads the results to a Pandas DataFrame by using the BigQuery Storage API.

To edit query syntax, you can do so from the BigQuery SQL editor or in the
```Optional:``` sections below.
"""

# Running this code will read results from your previous job

job = client.get_job('bquxjob_77796b55_18ae075852e') # Job ID inserted based on the query results selected to explore
results = job.to_dataframe()
results

"""## Show descriptive statistics using describe()
Use the ```pandas DataFrame.describe()```
[method](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html)
to generate descriptive statistics. Descriptive statistics include those that
summarize the central tendency, dispersion and shape of a datasetâ€™s
distribution, excluding ```NaN``` values. You may also use other Python methods
to interact with your data.
"""

results.describe()

import matplotlib.pyplot as plt

# Sample data from the provided table
purchased_product = [
    'Gift Card- $100.00', 'Gift Card - $25.00', 'Google Incognito Techpack V2',
    'Google Utility BackPack', "Google Women's Puff Jacket Black",
    "Google Men's Puff Jacket Black", "Google Raincoat Navy",
    "Google Men's Tech Fleece Grey", "Google Black Cloud Zip Hoodie",
    "Google Men's Softshell Moss", "Google Men's Tech Fleece Vest Charcoal",
    "Google Women's Tech Fleece Grey", "Supernatural Paper Backpack",
    'Gift Card - $50.00', 'Google Incognito Messenger Bag',
    'Google PNW Campus Bottle', "Google Men's Discovery Lt. Rain Shell",
    "Google Sherpa Zip Hoodie Charcoal", "Google Sherpa Vest Black",
    "Google Sherpa Zip Hoodie Navy", "Google Badge Heavyweight Pullover Black",
    "Google Women's Microfleece Jacket Black", "Google Incognito Dopp Kit V2",
    "Google Women's Grid Zip-Up", "Google Zip Hoodie F/C"
]

average_purchase_value = [
    1200.0, 187.5, 155.8846153846154, 138.31578947368422, 118.06666666666666,
    112.49090909090908, 111.0, 110.72222222222221, 101.7608695652174,
    95.53333333333332, 94.05084745762713, 93.53333333333333, 90.0,
    83.33333333333334, 75.0, 74.55555555555557, 74.0, 69.53260869565217,
    68.29629629629629, 67.08219178082192, 65.18120805369126, 64.54545454545455,
    64.33333333333333, 63.91836734693878, 63.24770642201835
]

max_transaction_count = [
    12, 15, 7, 11, 3, 2, 2, 6, 10, 4, 5, 2, 3, 2, 3, 2, 2, 5, 2, 5, 4, 2, 2, 4, 4
]

# Create a DataFrame from the sample data
import pandas as pd

data = pd.DataFrame({
    'purchased_product': purchased_product,
    'average_purchase_value': average_purchase_value,
    'max_transaction_count': max_transaction_count
})

# Sort the DataFrame by 'average_purchase_value' in descending order
data.sort_values(by='average_purchase_value', ascending=False, inplace=True)

# Create a bar plot
plt.figure(figsize=(12, 6))
plt.barh(data['purchased_product'], data['average_purchase_value'], color='skyblue')
plt.xlabel('Average Purchase Value')
plt.ylabel('Purchased Product')
plt.title('Average Purchase Value by Product')
plt.gca().invert_yaxis()  # Reverse the order to display the highest value at the top
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd

# Sample data from the provided table
purchased_product = [
    'Gift Card- $100.00', 'Gift Card - $25.00', 'Google Incognito Techpack V2',
    'Google Utility BackPack', "Google Women's Puff Jacket Black",
    "Google Men's Puff Jacket Black", "Google Raincoat Navy",
    "Google Men's Tech Fleece Grey", "Google Black Cloud Zip Hoodie",
    "Google Men's Softshell Moss", "Google Men's Tech Fleece Vest Charcoal",
    "Google Women's Tech Fleece Grey", "Supernatural Paper Backpack",
    'Gift Card - $50.00', 'Google Incognito Messenger Bag',
    'Google PNW Campus Bottle', "Google Men's Discovery Lt. Rain Shell",
    "Google Sherpa Zip Hoodie Charcoal", "Google Sherpa Vest Black",
    "Google Sherpa Zip Hoodie Navy", "Google Badge Heavyweight Pullover Black",
    "Google Women's Microfleece Jacket Black", "Google Incognito Dopp Kit V2",
    "Google Women's Grid Zip-Up", "Google Zip Hoodie F/C"
]

average_purchase_value = [
    1200.0, 187.5, 155.8846153846154, 138.31578947368422, 118.06666666666666,
    112.49090909090908, 111.0, 110.72222222222221, 101.7608695652174,
    95.53333333333332, 94.05084745762713, 93.53333333333333, 90.0,
    83.33333333333334, 75.0, 74.55555555555557, 74.0, 69.53260869565217,
    68.29629629629629, 67.08219178082192, 65.18120805369126, 64.54545454545455,
    64.33333333333333, 63.91836734693878, 63.24770642201835
]

max_transaction_count = [
    12, 15, 7, 11, 3, 2, 2, 6, 10, 4, 5, 2, 3, 2, 3, 2, 2, 5, 2, 5, 4, 2, 2, 4, 4
]

# Create a DataFrame from the sample data
data = pd.DataFrame({
    'purchased_product': purchased_product,
    'average_purchase_value': average_purchase_value,
    'max_transaction_count': max_transaction_count
})

# Sort the DataFrame by 'average_purchase_value' in descending order
data.sort_values(by='average_purchase_value', ascending=False, inplace=True)

# Display the interpretation as text
for idx, row in data.iterrows():
    print(f"Product: {row['purchased_product']}")
    print(f"Average Purchase Value: {row['average_purchase_value']}")
    print(f"Max Transaction Count: {row['max_transaction_count']}")
    print("=" * 30)